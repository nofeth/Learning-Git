VERSION CONTROL ADA 3 MACAM

LOCAL VERSION CONTROL
+ hanya berjalan di local komputer
+ digunakan karena sederhana dan tidak butuh server
+ setiap perubahan pada file hanya di simpan di komputer
- jika komputer rusak maka seluruh datanya hilang
- agak sulit berkolaborasi dengan pengguna lain

CENTRALIZED VERSION CONTROL
+ menyimpan seluruh data revisi di server
+ orang lain bisa mengakses data ke server untuk melihat file
- jika pengguna offline,mereka tidak bisa melakukan perubahan dan melihat revisi file

DISTRIBUTED VERSION CONTROL
alternatif lain dari CENTRALIZED VERSION CONTROL
+ client tidak hanya mengambil file v ersi terakhir,namun seluruh riwayat revisi di copy seluruhnya
+ nah hal ini juga jika tidak terkoneksi maka kita masih tetap bisa bekerja,memanipulasi file,sampai melihat riwayat perubahan
+ server lebih dari satu,karena tiap server isinya sama, full backup data

salah satu DVCs adalah git

git tidak membutuhkan server dikarenakan semua riwayat project akan selalu di duplikasi
artinya git juga local versioon control
setiap perubahan yang terjadi di git akan selalu dibuat signature(tanda)nya menggunakan algoritma hashing sha-1.
semua hal yang terjadi di git secara otomatis akan dicatat,hal
ini menjadikan perubahan apapun di git,pasti selalu bisa dikembalikan ke versi sebelumnya
GIT CONFIGURATION
setiap perubahan di dalam project git itu nanti akan disisipkan username sama email
agar ketahuan siapa yang melakukan perubahan 
git config --global user.name/email "namanya"`
default editor
git config --global core.editor "code --wait"

REPOSITORY
merupakan sebutan project di GIT
folder kosong atau sudah berisi lalu membuatnya sebagai git repository
atau bisa menggunakan clone git pada server git

MEMBUAT REPOSITORY
membuat repository cukup dengan perintah git init
di dalam folder yang sudah kita jadikan repository
terdapat folder baru dengan nama .git
.git merupakan database GIT

THE THREE STATES
Git memiliki tiga state terdapat file kita

MODIFIED
mengubah (CUD pada file), namun belum disimpan secara permanen ke repository
STAGED
kita menandai modifikasi yang kita lakukan terhadap file akan disimpan secara permanen ke repository
COMMITTED
data sudah disimpan di repository
FLOW
ada 5 file kita kasih 3 file ditandai agar disimpan secara permanen maka kita lakukan STAGED lalu kita lakukan COMMITTED
otomatis 3 file yang kita masukkan ke STAGED itu akan masuk ke mode COMMITTED

THREE SECTION
3 state sebelumnya di dalam git dilakukan di section yang berbeda beda
WORKING DIRECTORY
saat kita melakukan file dilakukan di WORKING DIRECTORY
ketika kita menandai file yang siap di commit ini akan pindah ke section STAGING AREA
STAGING AREA
merupakan section dimana file sudah disiapkan untuk disimpan secara permanen
STAGING AREA semua informasi perubahan file akan disimpan
ketika kita melakukan commit maka akan pindah ke REPOSITORY
REPOSITORY
tempat dimana semua file dan database riwayat versi file disimpan

DIAGRAM THREE TREE

WORKING > GIT ADD > STAGING -> GIT COMMIT -> REPOSITORY

SNAPSHOT 
kumpulan dari perubahan yang kita kumpulkan.perubahan yang terjadi akan direkam dan kita sebut namanya snapshot
snpashot berisikan semua perubahan di semua file yang kita commit
setiap snapshot menghasilkan hash 

HASH
setiap snapshot yang kita lakukan,semua akan menghasilkan hash sebagai identitas snapshotnya
hash merupakan checksum untuk menghitung perubahan yang terjadi
HASH dibutuhkan untuk menjaga data integrity
sehingga tiap snapshot  yang sudah kita lakukan tidak bisa diubah

PERHITUNGAN HASH
perhitungan hash dilakukan tidak hanya dari perubahan file
namun juga dari parent, author dan message
artinya perubahan yang terjadi pada snapshot sebelumnya.maka akan menimbulkan efek berantai,karena semua hash selanjutnya akan berubah
oleh karena itu,hal tersebut tidak bisa dilakukan di GIT 

HEAD
merupakan pointer menuju hash yang paling akhir
karena kadang sangat menyulitkan jika harus menuliskan hash value,jika kita akan menuju ke hash paling baru,kita bisa gunakan kata head
jadi head itu agar kita tidak menulis hash langsung menuju ke akhir hash atau perubahan yang terbaru

git commit

git diff untuk melihat perubahan pada file

git add .
untuk memindahkan semuanya

(khusus file yang ada di repository)
ketika menghapus file yang ada di repository tetap gunakan git add nama_file/folder yang sudah dihapus lalu git commit
menghapus file yang ada di working tree

MEMBATALKAN PERUBAHAN (MASIH DI WORKING DIRECTORY)
jika kita menambah file di working directory,lalu misal kita ingin membatalkan perubahannya
kita hanya perlu menghapus file tersebut atau bisa menggunakan git clean -f

MEMBATALKAN PERUBAHAN FILE (MASIH DI WORKING DIRECTORY)
jika kita ingin membatalkan perubahan file,kita bisa menggunakan
git restore nama_file

MEMBATALKAN PENGHAPUSAN FILE 
(FILE YANG DI RESTORE ADALAH FILE DALAM KONDISI DI STAGING AREA / REPOSITORY? YANG MANA TERAKHIR KALI DI STAGE)
sama seperti membatalkan perubahan file bisa gunakan 
git restore nama_file

MEMBATALKAN DARI STAGING INDEX
perintah git store hanya bisa dilakukan untuk membatalkan perubahan yang terjadi di working directory
artinya ketika file terlanjur kita masukkan ke staging index maka untuk membatalkannya tidak bisa kita lakukan secara langusng 
dari staging index
kita perlu mengembalikan posisi dari staging index ke working directory terlebih dahulu
git restore --staged namafile

MEMBATALKAN YANG SUDAH DI COMMIT?
tidak ada cara yang bisa kita lakukan jika perubahan sudah terlanjur di commit
yang bisa kita lakukan adalah dua cara
rollback commit atau revert commit

COMMIT LOG
walaupun repository kita di local komputer kita
semua riwayat perubahan disimpan di komputer kita
kekurangannya menjadi makin lama repository akan semakin besar ukurannya 
namun keuntungannya kita bisa liat semua perubahannnya
git log

LOG SEDERHANA
kadang kita hanya ingin melihat commit log pesannya saja atau sederhananya saja
lakukan git log --oneline

GRAPH 
saat nanti kita sudah belajar tentangg git branching,kadang kita ingin melihat commit log dengan hubungannya dengan  commit log sebelumnya
perintah : git log --oneline --graph 

MELIHAT DETAIL COMMIT
ketika kita ingin melihat detail perubahan yang terjadi pada sebuah commit
git show nama_hashnya

MEMBANDINGKAN COMMIT
git mempunyai fitur membandingkan commit dengan commit lainnya
membandingkan disini adalah membandingkan snapshot hasil commit bukan perubahan yang terjadi antara commit
git diff hash1 hash2

DIFFTOOL
sebelumnya kita sudah melakukan perngaturan menggunakan vs code untuk melihat diff
jika kita ingin menggunakan vscode untuk melihat perbedaan antar commit,kita bisa gunakan
daripada melihat perubahan pada commit1 dan commit 2 di cli kita bisa gunakan difftool ini untuk melihat perubahannnya
git difftool hash1 hash2

RENAME FILE
git bisa mendeteksi rename file
sebenarnya rename file merupakan operasi gabungan antara hapus file,lalu menambah file baru dengan isi yang  sama
namun git bisa otomatis mendeteksi jika terjadi perubahan nama file,karena isi file sebagian besar masih sama
ketika kita cek menggunakan git status saat file sudah di rename maka prosesnya adalah file tersebut di delete lalu buat baru
kondisi ini masih di dalam working directory
namun ketika di staging index kita lakukan git add untuk file yang terhapus lalu git add lagi untuk file yang baru / yang baru saja rename
maka saat kita git status akan muncul pesan renamed berbeda dengan saat di working directory

RESET COMMIT
reset commit merupakan mekanisme dimana kita menggeser HEAD ke posisi commit yang kita mau,artinya commit selanjutnya akan dilakukan 
pada posisi HEAD baru 
contoh :
ketika kita mempunyai 3 commit ini artinya head commitnya berada di posisi ke 3 lalu kita geser HEADNYA ke commit 1 
maka head selanjutnya akan diisi dengan commit 1,jadi commit 3 otomatis di hilangkan/direplace begitu juga commit 1 
git reset <mode> nama_hash
<mode>
--soft memindahkan head pointer, namun tidak melakukan perubahan apapun di staging index dan working directory
--mixed memindahkan head pointer, mengubah staging index menjadi sama seperti dengan repository,namun tidak mengubah apapun di working directory
--hard memindahkan head pointer, mengubah staging index dan working directory sehingga sama dengan repository

REWRITE RIWAYAT COMMIT
jika kita melakukan reset,namun kita belum membuat commit baru
kita masih bisa kembali maju lagi ke commit yang paling baru
namun jika kita membuat commit baru,secara otomatis commit lama akan ditimpa commit baru
git reset <optional --mixed --hard> <hashnya>

AMEND COMMIT
kadang saat sudah melakukan commit,mungkin ada beberapa hal yang terlupakan kita bisa lakukan git ulang dengan commit yang sebelumnya
biasanya menggunakan reset soft ke commit sebelumnya lalu tambahkan perubahan > commit ulang
ada hal lain yang bisa dilakukan,menggunakan git commit --amend
perlu diingat,amend akan mengubah hash commit karena data perubahan yang di cmmit bertambah

VERSI SEBELUMNYA 
kadang kita sering mengalami masalah dengan file yang sudah kita commit ke repository
git memiliki fitur dimana kita bisa melihat versi file pada commit sebelumnya
saat kita ambil versi file sebelumnya,file pada commit tersebut akan berada di staging index
untuk melakukannya kita bisa gunakan perintah
git checkout hash -- namafile

SNAPSOT SEBELUMNYA
kita bisa melihat snapshot sebelumnya
kita bisa tentukan kemana tujuan snapshot kita hanya dengan menggunakan hash commit
git checkout hash
jika ingin kembali ke paling awal branch
git checkout namabranch 

untuk melihat branch saat ini
git branch --show-current

REVERT COMMIT
untuk membatalkan commit yang sudah kita lakukan dengan cara membuat commit baru yang membatalkan commit sebelumnya
git revert nama_hash
jadi revert ini lebih aman daripada reset kalo reset semua yang setelah commit tersebut akan hilang
sedangkan revert cmn commit itu yang dibalikkan jadi tidak setelah commit itu

IGNORE
kadang saat membuat aplikasi tidak semua file kita ingin track ke dalam git
caranya kita bisa tambahkan file .gitgnore di repository
lalu di dalamnya kita tambahkan tiap baris di file .gitignore berisikan file / folder yang kita hiraukan

ignore folder 
/log
ignore file dengan extension
./html
ignore
ignore.txt

BLAME
saat membuat kod program kdang kita ingin tahu,siapa yang menambahkan baris kode program tersebut
blame ini digunakan untuk mencari tahu siapa yang menambah perubahan pada file dan juga untuk mengetahui commitnya
git blame namafile

ALIAS
dengan alias kita bisa menambah nama perintah lain untuk perintah yang sudah ada di git
jadi kayak nama yang kita buat sendiri bisa memanggil perintah di git
untuk mempersingkat saja contoh : co dari commit
git config --global alias.co commit
