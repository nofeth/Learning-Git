BRANCHING
branching artinya kita membuat timeline baru yang berbeda dari timeline utama
timeline utama => master atau main
daripada kita menambah fitur ke branch utama lebih baik kita buat branch baru dengan fitur tersebut

HOTFIX => PERBAIKAN SECEPATNYA

ketika ada bug saat aplikasinya sudah di run 
bisa gunakan branch 
buat branch baru setelah di perbaiki kita merge ke main/master branch

PINDAH KE BRANCH LAIN
untuk pindah ke branch lain
git switch nama_branch
atau 
git checkout nama_branch

MENGUBAH NAMA BRANCH
pertama kita pindah terlebih dahulu ke branch yang kita ingin ubah
lalu jalankan perintah 
git branch -m nama_branch_baru

MENGAHPUS BRANCH
kalo kebanyakan branch nanti juga pusing mtnya
untuk menghapus branch kita perlu keluar terlebih dahulu dari branch tersebut
lalu gunakan perintah
git branch -d nama_branch
git branch --delete nama_branch

MULTIPLE BRANCH
branch biasanya dibuat banyak sekali
git mendukung multiple branch git bisa mengananganinya dengan baik

ketika kita commit di branch yang lain maka yang terjadi 
setiap branch memiliki commitnya tersendiri

MERGE 
merge adalah proses dimana kita melakukan penggabungan dua branch
merge biasanya dilakukan setelah kita selesai membuat kode program di sebuah branch,dan ingin menggabungkan fitur tersebut ke branch lain,misal branch utama
ketika dua branch dimerge bukan berarti dijadikan satu branch tetapi lebih ke perubahan mana akan ditarik ke perubahan mana 

untuk melakukan merge kita perlu pindah ke branch dimana merge akan dilakukan
lalu gunakan perintah : git merge nama_branch
ketika di merge juga akan membuat commit baru


MERGE CONFLICT
dalama pembuatan aplikasi,biasanya setiap programmer akan melakukan penambahan kode program di repository secara parallel
biasanya tiap programmer akan membuat branch masing2
dan tidak bisa dihindari,kadang programmer akan melakukan perubahan pada kode file yang sama di branch yang berbeda
dan biasanya ketika melakukan merge,akan terjadi yang namanya conflict
hal ini disebabkan,satu file diubah di branch yang berbeda,sehingga ketika di merge,kita perlu melakukan yang namanya merge conflict
<<<<<<< HEAD

MEMBATALKAN CONFLICT 
jika terjadi conflict kita wajib memperbaiki terlebih dahulu 
semua perubahan yang tidak konflik akan secara otomotis berada di staging index
sedangkan perubahan yang konflik akan secara otomatis berada di working directory
jika kita ingin membatalkan merge gunakan perintah
git merge --abort
secara otomatis semua perubahan di branch yang ingin kita merge akan dihapus

MEMPERBAIKI CONFLICT
saat terjadi conflict tidak ada cara otomatis memperbaikinya
kita perbaiki secara manual
dan jika perbaikan conflict sudah dilakukan, maka kita perlu melakukan commit perubahan tersebut

CHERRY PICK 
kadang ada kasus, ketika kita membuat kode program di sebuah branch kita ingin melakukan merge, namun tidak ingin
melakukan merge semua branchnya, mungkin hanya sebagian commit saja
cherry pick fitur yang digunakan untuk mengambil commit dari branch manapun dan kita merge ke dalam branch saat ini

CHERRY PICK 
kadang ada kasus, ketika kita membuat kode program di sebuah branch kita ingin melakukan merge, namun tidak ingin
melakukan merge semua branchnya, mungkin hanya sebagian commit saja
cherry pick fitur yang digunakan untuk mengambil commit dari branch manapun dan kita merge ke dalam branch saat ini 

kita ingin melakukan merge branch feature/c, namun kita tidak ingin merge semua perubahan
misal saja kita hanya ingin melakukan merge perubahan di file1.txt
maka kita bisa melakukan cherry pick untuk perubahan tersebut,
git cherry-pick commitIdnya

SSH (SECURE SHELL)
SSH merupakan protokol jaringan untuk komunikasi jaringan yang aman dan ternkripsi
SSH merupakan aplikasi berbasis termanil

GIT SSH
git sendir memiliki beberapa mekanisme untuk berkomunikasi dengan git server. seperti http dan ssh
hal ini karena SSH merupakan protokol yang direkomendasikan ketika berkomunikasi dengan git server
salah satu keuntungan SSH tidak perlu memasukkan usernam dan password setiap mengirim dan juga mengambil data

SSH KEY 
hal pertama ketika yang perlu kita lakukan menggunakan SSH adalah membuat key 
SSH key merupakan kunci yang digunakan untuk autentikasi ke SSH server 
untuk membuatnya kita bisa gunakan perintah ssh-keygen di termnial
secara otomatis akan terdapat 2 key di local kita yaitu private key dan public key
kita bisa melihatnya di dalam folder .ssh di home directory kita
file id_rsa adalah private key dan id_rsa.pub adalah public key

TEST SSH KE GITHUB
gunakan perintah ssh -T git@github.com

REMOTE REPOSITORY
ketika kita membuat git project,git tidak tahu tentangg remote repository
kita perlu memberi tahu ke git project yang sudah kita bua tentang lokasi git repository
menambahkan git repository
git remote add nama_remote ssh-url
salah satu kebiasaan di git,biasanya memberi nama untuk remote repository dengan nama origin

MELIHAT REMOTE REPOSITORY
kita bisa gunakan perintah git remote
untuk melihat url detail remote repositorynya 
bisa gunakan perintah git remote get-url nama_remotenya

MENGHAPUS REMOTE REPOSITORY
git remote rm nama_repositorynya

PUSH
walaupun kita sudah menyimpan perubahannya di local tapi tidak secara otomatis akan di sync dengan remote repository
hal ini karena sejak awal git di desain sebagai distributed verson control,artinya kita bisa melakukan perubahan dimanapun dan kapanpun yang terjadi
di git project di local kita,kita perlu mengirimnya secara manual ke git server
untuk mengirim perubahan di local ke git server gunakan perintah
push

PUSH BRANCH
untuk emngirim perubahan branch ke remote repository dengan namaa branch yang sama
git push nama_remote localbranch contoh nama localbranch master atau main
untuk mengirim perubahan branch ke remote repository dengan nama branch yang berbeda kita gunakan perintah
git push namaremote localbranch:remotebranch

PUSH SEMUA BRANCH
git push origin --all

MENGHAPUS BRANCH
perintah push juga bisa digunakan untuk menghapus branch yang ada di remote repository
git push --delete nama_remote nama_branch
perlu diingat menghapus remote branch bukan berarti menghapus branch di local,jadi kita harus menghapus secara manual
hapus di localnya lalu hapus di remotenya

MELKUKAN CLONE
gunakan perintah
git clone urlnya
ketika melakukan clone nama project akan sama dengan nama project yang ada di repository
untuk menentukan nama tersendiri saat melakukan clone gunakan perintah :
git clone url_ssh/http nama_folder